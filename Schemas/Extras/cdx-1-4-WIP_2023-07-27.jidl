 package:  "http://cyclonedx.org/schema/bom-1.4.schema.jadn"
 version:  "1"
   title:  "CycloneDX v1.4 JADN Schema, as of 27 July. "
 comment:  "Known shortcomings: required / optional values needed for most types; hasn't been tested against any CDX SBOM"
 exports:  ["bom"]
  config:  {"$MaxBinary": 255, "$MaxString": 255, "$MaxElements": 150, "$Sys": "$", "$TypeName": "^[a-zA-Z][-$A-Za-z0-9]{0,63}$", "$FieldName": "^[a-z][_A-Za-z0-9\\-]{0,63}$", "$NSID": "^[A-Za-z][A-Za-z0-9]{0,7}$"}

Vulnerabilities = ArrayOf(Vulnerability) unique  // Vulnerabilities identified in components or services.

Dependencies = ArrayOf(Dependency) unique  // Provides the ability to document dependency relationships.

ExternalReferences = ArrayOf(externalReference)  // External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.

Services = ArrayOf(Service) unique  // A list of services. This may include microservices, function-as-a-service, and other types of network or intra-process services

CDX = Enumerated
    1  CycloneDX  // Specifies the format of the BOM.

bom = Record                                            // The core bill of materials
    1  bomFormat           CDX                          // Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOMs do not have a filename convention nor does . JSON schema support namespaces. This value MUST be \"CycloneDX\".
    2  specVersion         String                       // The version of the CycloneDX specification a BOM conforms to (starting at version 1.2).
    3  serialNumber        SerialNumber optional        // Every BOM generated SHOULD have a unique serial number, even if the contents of the BOM have not changed over time. If specified, the serial number MUST conform to RFC-4122. Use of serial numbers are RECOMMENDED.
    4  version             Integer                      // Whenever an existing BOM is modified, either manually or through automated processes, the version of the BOM SHOULD be incremented by 1. When a system is presented with multiple BOMs with identical serial numbers, the system SHOULD use the most recent version of the BOM. The default version is '1'.
    5  metadata            Metadata optional            // Provides additional information about a BOM
    6  components          ComponentSet optional        // A list of software and hardware components.
    7  services            Services optional            // A list of services. This may include microservices, function-as-a-service, and other types of network or intra-process services
    8  externalReferences  ExternalReferences optional  // External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
    9  dependencies        Dependencies optional        // Provides the ability to document dependency relationships.
   10  compositions        Compositions optional        // Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness.
   11  vulnerabilities     Vulnerabilities optional     // Vulnerabilities identified in components or services.
   12  signature           String optional              // Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).

Metadata = Record                                  // Provides additional information about a BOM
    1  timestamp    TimeStamp optional             // The date and time (timestamp) when the BOM was created.
    2  tools        Tools optional                 // The tool(s) used in the creation of the BOM.
    3  authors      Authors optional               // The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
    4  component    Component optional
    5  manufacture  organizationalEntity optional  // The organization that manufactured the component that the BOM describes.
    6  supplier     organizationalEntity optional  // The organization that supplied the component that the BOM describes. The supplier may often be the manufacturer, but may also be a distributor or repackager.
    7  licenses     licenseChoice optional         // BOM license(s).
    8  properties   Properties optional            // Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.

Compositions = ArrayOf(Composition)

refType = String  // Identifier-DataType for interlinked elements

Tool = Record                                           // Information about the automated or manual tool used
    1  vendor              String optional              // The name of the vendor who created the tool
    2  name                String optional              // The name of the tool
    3  version             String optional              // The version of the tool
    4  hashes              HashArray optional           // The hashes of the tool (if applicable)
    5  externalReferences  ExternalReferences optional  // External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.

Tools = ArrayOf(Tool)

Author = String

Authors = ArrayOf(organizationalContact)

Component = Record                               // The component that the BOM describes.
    1  type                ComponentType         // Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component. Types include: application, framework, library, container, operating-system, device, firmware, file.
    2  mime-type           Mime-Type             // The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
    3  bom-ref             refType               // An optional identifier which can be used to reference the component elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
    4  supplier            organizationalEntity  // The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.
    5  author              String                // The person(s) or organization(s) that authored the component
    6  publisher           String                // The person(s) or organization(s) that published the component
    7  group               String                // The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
    8  name                String                // The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
    9  version             String                // The component version. The version should ideally comply with semantic versioning but is not enforced.
   10  description         String                // Specifies a description for the component
   11  scope               ComponentScope        // Specifies the scope of the component. If scope is not specified, 'required' scope SHOULD be assumed by the consumer of the BOM.  NOTE: should deal with default value of "required".
   12  hashes              HashArray
   13  licenses            LicenseChoises
   14  copyright           String                // A copyright notice informing users of the underlying claims to copyright ownership in a published work.
   15  cpe                 String                // Specifies a well-formed CPE name that conforms to the CPE 2.2 or 2.3 specification. See https://nvd.nist.gov/products/cpe
   16  purl                String                // Specifies the package-url (purl). The purl, if specified, MUST be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
   17  swid                swid                  // Specifies metadata and content for [ISO-IEC 19770-2 Software Identification (SWID) Tags](https://www.iso.org/standard/65666.html)
   18  modified            Boolean               // [Deprecated] - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating if the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
   19  pedigree            Pedigree              // Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
   20  externalReferences  ExternalReferences    // External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
   21  components          ComponentSet          // A list of software and hardware components included in the parent component. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system &#8594; subsystem &#8594; parts assembly in physical supply chains.
   22  evidence            componentEvidence     // Provides the ability to document evidence collected through various forms of extraction or analysis.
   23  releasetNotes       releaseNotes          // Specifies optional release notes.
   24  properties          Properties            // Provides the ability to document properties in a name-value store.
   25  signature           String                // Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).

organizationalEntity = Record
    1  name     String    // The name of the organization
    2  url      URLs      // The URL of the organization; multiple URLs are allowed
    3  contact  Contacts  // A contact at the organization. Multiple contacts are allowed.

property = Record     // Lightweight name-value pair
    1  name   String  // The name of the property. Duplicate names are allowed, each potentially having a different value.
    2  value  String  // The value of the property

Properties = ArrayOf(property)  // Array of name-value pairs.

URL = String /iri-reference  // A utility type for URLs

URLs = ArrayOf(URL)  // Array of URLs

EmailAddr = String /idn-email  // An email address

organizationalContact = Record
    1  name   String     // The name of a contact
    2  email  EmailAddr  // The email address of a contact
    3  phone  String     // The phone number of a contact.

Contacts = ArrayOf(organizationalContact)  // Array of contacts for organizationalEntity

range = String{1..1024}  // A version range specified in Package URL Version Range syntax (vers) which is defined at https://github.com/package-url/purl-spec/VERSION-RANGE-SPEC.rst

version = String{1..1024}  // A single version of a component or service.

affectedStatus = Enumerated  // The vulnerability status of a given version or range of versions of a product. The statuses 'affected' and 'unaffected' indicate that the version is affected or unaffected by the vulnerability. The status 'unknown' indicates that it is unknown or unspecified whether the given version is affected. There can be many reasons for an 'unknown' status, including that an investigation has not been undertaken or that a vendor has not disclosed the status.
    0  affected    //
    1  unaffected  //
    2  unknown     //

vulnerabilitySource = Record  // The source of vulnerability information. This is often the organization that published the vulnerability.
    1  url   URL     // The url of the vulnerability documentation as provided by the source.
    2  name  String  // The name of the sources; examples presented like an enumeration (0 : NVD; 1 : National Vulnerability Database; 2 : OSS Index; 3 : VulnDB; 4 : GitHub Advisories)

severity = Enumerated  // Textual representation of the severity of the vulnerability adopted by the analysis method. If the analysis method uses values other than what is provided, the user is expected to translate appropriately.
    0  critical  //
    1  high      //
    2  medium    //
    3  low       //
    4  info      //
    5  none      //
    6  unknown   //

cwe = Integer{1..*}  // Integer representation of a Common Weaknesses Enumerations (CWE). For example 399 (of https://cwe.mitre.org/data/definitions/399.html)

advisory = Record     // Title and location where advisory information can be obtained. An advisory is a notification of a threat to a component, service, or system.
    1  title  String  // An optional name of the advisory
    2  url    URL     // Location where the advisory can be obtained

scoreMethod = Enumerated  // Specifies the severity or risk scoring methodology or standard used.\n\n* CVSSv2 - [Common Vulnerability Scoring System v2](https://www.first.org/cvss/v2/)\n* CVSSv3 - [Common Vulnerability Scoring System v3](https://www.first.org/cvss/v3-0/)\n* CVSSv31 - [Common Vulnerability Scoring System v3.1](https://www.first.org/cvss/v3-1/)\n* OWASP - [OWASP Risk Rating Methodology](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology)
    0  CVSSv2   //
    1  CVSSv3   //
    2  CVSSv31  //
    3  OWASP    //
    4  other    //

TimeStamp = String /date-time  // Timestamp using JSON schema date-time format

identifiableAction = Record  // specifies an individual commit
    1  timestamp  TimeStamp  // The timestamp in which the action occurred.
    2  name       String     // The name of the individual who performed the action
    3  email      EmailAddr

attachment = Record                  // Specifies the metadata and content for an attachment
    1  contentType  String optional  // Specifies the content type of the text. Defaults to text/plain if not specified.
    2  encoding     ContentEncoding  // Specifies the optional encoding the text is represented in.   NOTE: has embedded enum with one option (0 : base64)
    3  content      String           // The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.

diff = Record            // The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
    1  text  attachment  // Specifies the optional text of the diff
    2  url   URL         // Specifies the URL to the diff

SerialNumber = String (%^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$%)  // Every BOM generated SHOULD have a unique serial number, even if the contents of the BOM have not changed over time. If specified, the serial number MUST conform to RFC-4122. Use of serial numbers are RECOMMENDED.

localeType = String (%^([a-z]{2})(-[A-Z]{2})?$%)  // Defines a syntax for representing two character language code (ISO-639) followed by an optional two character country code. The language code MUST be lower case. If the country code is specified, the country code MUST be upper case. The language code and country code MUST be separated by a minus sign. Examples: en, en-US, fr, fr-CA

note = Record              // A note containing the locale and content
    1  locale  localeType  // The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include: \"en\", \"en-US\", \"fr\" and \"fr-CA\"
    2  text    attachment  // Specifies the full content of the release note.

releaseType = String  // The software versioning type. It is RECOMMENDED that the release type use one of 'major', 'minor', 'patch', 'pre-release', or 'internal'. Representing all possible software release types is not practical, so standardizing on the recommended values, whenever possible, is strongly encouraged.\n\n* __major__ = A major release may contain significant changes or may introduce breaking changes.\n* __minor__ = A minor release, also known as an update, may contain a smaller number of changes than major releases.\n* __patch__ = Patch releases are typically unplanned and may resolve defects or important security issues.\n* __pre-release__ = A pre-release may include alpha, beta, or release candidates and typically have limited support. They provide the ability to preview a release prior to its general availability.\n* __internal__ = Internal releases are not for public consumption and are intended to be used exclusively by the project or manufacturer that produced it.

aggregateType = Enumerated
    1  complete                     //
    2  incomplete                   //
    3  incomplete_first_party_only  //
    4  incomplete_third_party_only  //
    5  unknown                      //
    6  not_specified                //

dataFlow = Enumerated  // Specifies the flow direction of the data. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
    1  inbound         //
    2  outbound        //
    3  bi-directional  //
    4  unknown         //

dataClassification = Record
    1  flow            dataFlow  // Specifies the flow direction of the data. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
    2  classification  String    // Data classification tags data according to its type, sensitivity, and value if altered, stolen, or destroyed.

hash-content = String (%^([a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}|[a-fA-F0-9]{96}|[a-fA-F0-9]{128})$%)  // hash content value

hash-alg = Enumerated  // enumeration of hash algorithms
    1  MD5          //
    2  SHA-1        //
    3  SHA-256      //
    4  SHA-384      //
    5  SHA-512      //
    6  SHA3-256     //
    7  SHA3-384     //
    8  SHA3-512     //
    9  BLAKE2b-256  //
   10  BLAKE2b-384  //
   11  BLAKE2b-512  //
   12  BLAKE3       //

rating = Record                            // Defines the severity or risk ratings of a vulnerability.
    1  source         vulnerabilitySource  // The source that calculated the severity or risk rating of the vulnerability.
    2  score          Number               // The numerical score of the rating
    3  severity       severity
    4  method         scoreMethod
    5  vector         String               // Textual representation of the metric values used to score the vulnerability
    6  justification  String               // An optional reason for rating the vulnerability as it was

impactAnalysisState = Enumerated  // Declares the current state of an occurrence of a vulnerability, after automated or manual analysis. \n\n* __resolved__ = the vulnerability has been remediated. \n* __resolved\\_with\\_pedigree__ = the vulnerability has been remediated and evidence of the changes are provided in the affected components pedigree containing verifiable commit history and/or diff(s). \n* __exploitable__ = the vulnerability may be directly or indirectly exploitable. \n* __in\\_triage__ = the vulnerability is being investigated. \n* __false\\_positive__ = the vulnerability is not specific to the component or service and was falsely identified or associated. \n* __not\\_affected__ = the component or service is not affected by the vulnerability. Justification should be specified for all not_affected cases.
    1  resolved               //
    2  resolve_with_pedigree  //
    3  exploitable            //
    4  in_triage              //
    5  false_positive         //
    6  not_affected           //

impactAnalysisJustification = Enumerated  // The rationale of why the impact analysis state was asserted. \n\n* __code\\_not\\_present__ = the code has been removed or tree-shaked. \n* __code\\_not\\_reachable__ = the vulnerable code is not invoked at runtime. \n* __requires\\_configuration__ = exploitability requires a configurable option to be set/unset. \n* __requires\\_dependency__ = exploitability requires a dependency that is not present. \n* __requires\\_environment__ = exploitability requires a certain environment which is not present. \n* __protected\\_by\\_compiler__ = exploitability requires a compiler flag to be set/unset. \n* __protected\\_at\\_runtime__ = exploits are prevented at runtime. \n* __protected\\_at\\_perimeter__ = attacks are blocked at physical, logical, or network perimeter. \n* __protected\\_by\\_mitigating\\_control__ = preventative measures have been implemented that reduce the likelihood and/or impact of the vulnerability.
    1  code_not_present                 //
    2  code_not_reachable               //
    3  requires_configuration           //
    4  requires_dependency              //
    5  requires_environment             //
    6  protected_by_compiler            //
    7  protected_at_runtime             //
    8  protected_at_perimeter           //
    9  protected_by_mitigating_control  //

commit = Record                       // Specifies an individual commit
    1  uid        String              // A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
    2  url        URL                 // The URL to the commit. This URL will typically point to a commit in a version control system.
    3  author     identifiableAction  // The author who created the changes in the commit
    4  committer  identifiableAction  // The person who committed or pushed the commit
    5  message    String              // The text description of the contents of the commit

hash = Record  // Hash Objects
    1  alg      hash-alg
    2  content  hash-content

RefArray = ArrayOf(refType)

dependency = Record         // Defines the direct dependencies of a component. Components that do not have their own dependencies MUST be declared as empty elements within the graph. Components that are not represented in the dependency graph MAY have unknown dependencies. It is RECOMMENDED that implementations assume this to be opaque and not an indicator of a component being dependency-free.
    1  ref        refType   // References a component by the components bom-ref attribute
    2  dependsOn  RefArray  // The bom-ref identifiers of the components that are dependencies of this dependency object

copyright = Record
    1  text  String  // copyright text

RefItem = Record                    // Container for items in the ArrayOf() for references type
    1  id      String               // An identifier that uniquely identifies the vulnerability. Examples: CVE-2021-39182, GHSA-35m5-8cvj-8783, SNYK-PYTHON-ENROCRYPT-1912876.
    2  source  vulnerabilitySource

references = ArrayOf(RefItem)  // Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have different identifiers. References provide a way to correlate vulnerabilities across multiple sources of vulnerability intelligence.

swid = Record                  // SWID Tag: Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
    1  tagId       String      // Maps to the tagId of a SoftwareIdentity.
    2  name        String      // Maps to the name of a SoftwareIdentity.
    3  version     String      // Maps to the version of a SoftwareIdentity.
    4  tagVersion  Integer     // "Maps to the tagVersion of a SoftwareIdentity.
    5  patch       Boolean     // Maps to the patch of a SoftwareIdentity.
    6  text        attachment  // Attachment text: Specifies the metadata and content of the SWID tag.
    7  url         URL         // The URL to the SWID file.

spdxLicenseId = Enumerated  // a valid SPDX license ID. (placeholder)
    1  LicenseType1  //
    2  LicenseType2  //
    3  LicenseType3  //

LicenseSelector = Choice
    1  id    spdxLicenseId  // A valid SPDX license ID
    2  name  String         // If SPDX does not define the license used, this field may be used to provide the license name

License = Record                  // License object
    1  selector  LicenseSelector  // Either/or of a valid SPDX license or an arbitrary license name in a string
    2  text      attachment       // License text: An optional way to include the textual content of a license.
    3  url       URL              // The URL to the license file. If specified, a 'license' externalReference should also be specified for completeness

licenseChoice = Choice
    1  license     License
    2  expression  String

IssueSource = Record // The source of the issue where it is documented
    1  name  String  // The name of the source. For example 'National Vulnerability Database', 'NVD', and 'Apache'
    2  url   URL     // The url of the issue documentation as provided by the source

IssueType = Enumerated  // Specifies the type of issue
    1  defect       //
    2  enhancement  //
    3  security     //

LinkArray = ArrayOf(URL)  // an array of URLs

issue = Record                   // An individual issue that has been resolved
    1  type         IssueType    // Specifies the types of a issue
    2  id           String       // The identifier of the issue assigned by the source of the issue
    3  name         String       // The name of the issue
    4  description  String       // a description of the issue
    5  source       IssueSource  // The source of the issue where it is documented
    6  references   LinkArray    // A collection of URL's for reference. Multiple URLs are allowed.

HashArray = ArrayOf(hash)

ExternalRefType = Enumerated  // Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the \"other\" type.
    1  vcs            //
    2  issue-tracker  //
    3  website        //
    4  advisories     //
    5  bom            //
    6  mailing-list   //
    7  social         //
    8  chat           //
    9  documentation  //
   10  support        //
   11  distribution   //
   12  license        //
   13  build-meta     //
   14  build-system   //
   15  release-notes  //
   16  other          //

externalReference = Record       // Specifies an individual external reference
    1  url      URL              // The URL to the external reference
    2  comment  String           // An optional comment describing the external reference
    3  type     ExternalRefType  // Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the \"other\" type.
    4  hashes   HashArray        // The hashes of the external reference (if applicable).

PatchType = Enumerated  // Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
    1  unofficial   // __unofficial__ = A patch which is not developed by the creators or maintainers of the software being patched. Refer to [https://en.wikipedia.org/wiki/Unofficial_patch](https://en.wikipedia.org/wiki/Unofficial_patch)
    2  monkey       // __monkey__ = A patch which dynamically modifies runtime behavior. Refer to [https://en.wikipedia.org/wiki/Monkey_patch](https://en.wikipedia.org/wiki/Monkey_patch)
    3  backport     // __backport__ = A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to [https://en.wikipedia.org/wiki/Backporting](https://en.wikipedia.org/wiki/Backporting)
    4  cherry-pick  // __cherry-pick__ = A patch created by selectively applying commits from other versions or branches of the same software.

IssueArray = ArrayOf(issue)  // A collection of issues the patch resolves

patch = Record               // Specifies an individual patch
    1  type      PatchType   // Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionalit
    2  diff      diff        // The patch file (or diff) that show changes. Refer to [https://en.wikipedia.org/wiki/Diff](https://en.wikipedia.org/wiki/Diff)
    3  resolves  IssueArray  // A collection of issues the patch resolves.

compositions = Record
    1  aggregate     aggregateType  // Specifies an aggregate type that describe how complete a relationship is.
    2  assemblies    RefArray       // The bom-ref identifiers of the components or services being described. Assemblies refer to nested relationships whereby a constituent part may include other constituent parts. References do not cascade to child parts. References are explicit for the specified constituent part only.
    3  dependencies  RefArray       // The bom-ref identifiers of the components or services being described. Dependencies refer to a relationship whereby an independent constituent part requires another independent constituent part. References do not cascade to transitive dependencies. References are explicit for the specified dependency only
    4  signature     String         // Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).

Aliases = ArrayOf(String)  // One or more alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).

Tags = ArrayOf(String)  // One or more tags that may aid in search or retrieval of the release note.

Notes = ArrayOf(note)

releaseNotes = Record
    1  type           releaseType  // The software versioning type the release note describes.
    2  title          String       // The title of the release
    3  featuredImage  URL          // The URL to an image that may be prominently displayed with the release note.
    4  socialImage    URL          // The URL to an image that may be used in messaging on social media platforms.
    5  description    String       // A short description of the release
    6  timestamp      TimeStamp    // The date and time (timestamp) when the release note was created.
    7  aliases        Aliases      // One or more alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).
    8  tags           Tags         // One or more tags that may aid in search or retrieval of the release note.
    9  resolves       IssueArray   // A collection of issues that have been resolved.
   10  notes          Notes        // Zero or more release notes containing the locale and content. Multiple note objects may be specified to support release notes in a wide variety of languages.
   11  properties     Properties   // Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.

componentEvidence = Record        // Provides the ability to document evidence collected through various forms of extraction or analysis.
    1  licenses   LicenseChoises  // list of applicable licenses
    2  copyright  Copyrights      // list of applicable copyrights

LicenseChoises = ArrayOf(licenseChoice)

Copyrights = ArrayOf(copyright)

service = Record                                 // Service Object
    1  bom-ref             refType               // An optional identifier which can be used to reference the service elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
    2  provider            organizationalEntity  // The organization that provides the service.
    3  group               String                // Service Group: The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
    4  name                String                // Service Name: The name of the service. This will often be a shortened, single name of the service.
    5  version             String                // the service version
    6  description         String                // Specifies a description for the service
    7  authenticated       Boolean               // A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
    8  x-trust-boundary    Boolean               // A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
    9  data                DataClassArray        // Specifies the data classification
   10  licenses            LicenseChoises        // Component licenses
   11  externalReferences  ExternalReferences    // External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
   12  services            Services              // A list of services included or deployed behind the parent service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies.  NOTE: recursive, needs key / pointer.
   13  releaseNotes        releaseNotes          // Specifies optional release notes
   14  properties          Properties            // Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
   15  signature           String                // Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
   16  endpoints           URLs

DataClassArray = ArrayOf(dataClassification)

VersionExpression = Choice  // options to express applicable versions
    1  version  version  // A single version of a component or service
    2  range    version  // A version range specified in Package URL Version Range syntax (vers) which is defined at https://github.com/package-url/purl-spec/VERSION-RANGE-SPEC.rst   (NOTE: I think this might be an error in the CDX schema, and should be of type range rather than version.

AffectedVrsn = Record
    1  expression  VersionExpression  // choose format for expressing version
    2  status      affectedStatus     // The vulnerability status for the version or range of versions.  NOTE: need to express the default value of 'affected'

Ratings = ArrayOf(rating)  // a collection of ratings

CWEs = ArrayOf(cwe)  // a collection of CWEs

Advisories = ArrayOf(advisory)  // a collection of Advisories

Orgs = ArrayOf(organizationalEntity)  // a collection of organizations

Credits = Record                // a collection of credits for a vulnerability
    1  organizations  Orgs      // The organizations credited with vulnerability discovery.
    2  individuals    Contacts  // The individuals, not associated with organizations, that are credited with vulnerability discovery.

Reponse = Enumerated         // possible repsonses to a vulnerability
    1  can_not_fix           //
    2  will_not_fix          //
    3  update                //
    4  rollback              //
    5  workaround_available  //

Analysis = Recordn assessment of the impact and exploitability of the vulnerability.
    1  state          impactAnalysisState
    2  justification  impactAnalysisJustification
    3  response       Responses
    4  detail         String                       // Detailed description of the impact including methods used during assessment. If a vulnerability is not exploitable, this field should include specific details on why the component or service is not impacted by this vulnerability.

Responses = ArrayOf(Response)

AffectedVersions = ArrayOf(AffectedVrsn)

Affected = Record
    1  ref       refType           // References a component or service by the object's bom-ref
    2  versions  AffectedVersions  // Zero or more individual versions or range of versions.

ComponentType = Enumerated  // Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
    1  application       // A software application. Refer to https://en.wikipedia.org/wiki/Application_software
    2  framework         // A software framework. Refer to https://en.wikipedia.org/wiki/Software_framework
    3  library           // A software library. Refer to https://en.wikipedia.org/wiki/Library_(computing) for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is RECOMMENDED.
    4  container         // A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to https://en.wikipedia.org/wiki/OS-level_virtualization
    5  operating-system  // A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to https://en.wikipedia.org/wiki/Operating_system
    6  device            // A hardware device such as a processor, or chip-set. A hardware device containing firmware SHOULD include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device.
    7  firmware          // A special type of software that provides low-level control over a devices hardware. Refer to https://en.wikipedia.org/wiki/Firmware
    8  file              // A computer file. Refer to https://en.wikipedia.org/wiki/Computer_file

Mime-Type = String (%^[-+a-z0-9.]+/[-+a-z0-9.]+$%)  // The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.

ComponentScope = Enumerated  // Specifies the scope of the component. If scope is not specified, 'required' scope SHOULD be assumed by the consumer of the BOM.
    1  required  //
    2  optional  //
    3  excluded  //

ComponentSet = ArrayOf(component)

CommitSet = ArrayOf(commit)

PatchSet = ArrayOf(patch)

Pedigree = Record                          // Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
    1  ancestors    ComponentSet optional  // Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
    2  descendants  ComponentSet optional  // Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
    3  variants     ComponentSet optional  // Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
    4  commits      CommitSet optional     // A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
    5  patches      PatchSet optional      // A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
    6  notes        String optional        // Notes, observations, and other non-structured commentary describing the components pedigree

ContentEncoding = Enumerated  // enum for "encoding" in attachment type
    1  base64  //

Response = Enumerated        // possible responses to a vulnerability
    1  can_not_fix           //
    2  will_not_fix          //
    3  update                //
    4  rollback              //
    5  workaround_available  //

vulnerability = Record
    1  bom-ref         refType
    2  id              String
    3  source          vulnerabilitySource
    4  references      references
    5  ratings         Ratings
    6  cwes            CWEs
    7  description     String
    8  detail          String
    9  recommendation  String
   10  advisories      Advisories
   11  created         TimeStamp
   12  published       TimeStamp
   13  updated         TimeStamp
   14  credits         Credits
   15  tools           Tools
   16  analysis        Analysis
   17  affects         Affecteds
   18  properties      Properties

Affecteds = ArrayOf(Affected)
